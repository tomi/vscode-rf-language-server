{
  "name": "SeleniumLibrary",
  "version": "4.0.0",
  "keywords": [
    {
      "name": "Add Cookie",
      "args": [
        "name",
        "value",
        "path=None",
        "domain=None",
        "secure=None",
        "expiry=None"
      ],
      "doc": "Adds a cookie to your current session.\n\n``name`` and ``value`` are required, ``path``, ``domain``, ``secure``\nand ``expiry`` are optional.  Expiry supports the same formats as\nthe [http://robotframework.org/robotframework/latest/libraries/DateTime.html|DateTime]\nlibrary or an epoch time stamp.\n\nExample:\n| `Add Cookie` | foo | bar |                            |\n| `Add Cookie` | foo | bar | domain=example.com         |\n| `Add Cookie` | foo | bar | expiry=2027-09-28 16:21:35 | # Expiry as timestamp.     |\n| `Add Cookie` | foo | bar | expiry=1822137695          | # Expiry as epoch seconds. |\n\nPrior to SeleniumLibrary 3.0 setting expiry did not work."
    },
    {
      "name": "Add Location Strategy",
      "args": [
        "strategy_name",
        "strategy_keyword",
        "persist=False"
      ],
      "doc": "Adds a custom location strategy.\n\nSee `Custom locators` for information how to create and use\ncustom strategies. `Remove Location Strategy` can be used to\nremove a registered strategy.\n\nLocation strategies are automatically removed after leaving the\ncurrent scope by default. Setting ``persist`` to a true value (see\n`Boolean arguments`) will cause the location strategy to stay\nregistered throughout the life of the test."
    },
    {
      "name": "Alert Should Be Present",
      "args": [
        "text=",
        "action=ACCEPT",
        "timeout=None"
      ],
      "doc": "Verifies that an alert is present and, by default, accepts it.\n\nFails if no alert is present. If ``text`` is a non-empty string,\nthen it is used to verify alert's message. The alert is accepted\nby default, but that behavior can be controlled by using the\n``action`` argument same way as with `Handle Alert`.\n\n``timeout`` specifies how long to wait for the alert to appear.\nIf it is not given, the global default `timeout` is used instead.\n\n``action`` and ``timeout`` arguments are new in SeleniumLibrary 3.0.\nIn earlier versions the alert was always accepted and timeout was\nhard coded to one second."
    },
    {
      "name": "Alert Should Not Be Present",
      "args": [
        "action=ACCEPT",
        "timeout=0"
      ],
      "doc": "Verifies that no alert is present.\n\nIf the alert actually exists, the ``action`` argument determines\nhow it should be handled. By default the alert is accepted, but\nit can be also dismissed or left open the same way as with the\n`Handle Alert` keyword.\n\n``timeout`` specifies how long to wait for the alert to appear.\nBy default the alert is not waited at all, but a custom time can\nbe given if alert may be delayed. See the `time format` section\nfor information about the syntax.\n\nNew in SeleniumLibrary 3.0."
    },
    {
      "name": "Assign Id To Element",
      "args": [
        "locator",
        "id"
      ],
      "doc": "Assigns temporary ``id`` to element specified by ``locator``.\n\nThis is mainly useful if the locator is complicated and/or slow XPath\nexpression and it is needed multiple times. Identifier expires when\nthe page is reloaded.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nExample:\n| `Assign ID to Element` | //ul[@class='example' and ./li[contains(., 'Stuff')]] | my id |\n| `Page Should Contain Element` | my id |"
    },
    {
      "name": "Capture Element Screenshot",
      "args": [
        "locator",
        "filename=selenium-element-screenshot-{index}.png"
      ],
      "doc": "Captures screenshot from the element identified by ``locator`` and embeds it into log file.\n\nSee `Capture Page Screenshot` for details about ``filename`` argument.\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nAn absolute path to the created element screenshot is returned.\n\nSupport for capturing the screenshot from a element has limited support\namong browser vendors. Please check the browser vendor driver documentation\ndoes the browser support capturing a screenshot from a element.\n\nNew in SeleniumLibrary 3.3\n\nExamples:\n| `Capture Element Screenshot` | id:image_id |                                |\n| `Capture Element Screenshot` | id:image_id | ${OUTPUTDIR}/id_image_id-1.png |"
    },
    {
      "name": "Capture Page Screenshot",
      "args": [
        "filename=selenium-screenshot-{index}.png"
      ],
      "doc": "Takes screenshot of the current page and embeds it into log file.\n\n``filename`` argument specifies the name of the file to write the\nscreenshot into. The directory where screenshots are saved can be\nset when `importing` the library or by using the `Set Screenshot\nDirectory` keyword. If the directory is not configured, screenshots\nare saved to the same directory where Robot Framework's log file is\nwritten.\n\nStarting from SeleniumLibrary 1.8, if ``filename`` contains marker\n``{index}``, it will be automatically replaced with unique running\nindex preventing files to be overwritten. Indices start from 1,\nand how they are represented can be customized using Python's\n[https://docs.python.org/2/library/string.html#formatstrings|\nformat string syntax].\n\nAn absolute path to the created screenshot file is returned.\n\nExamples:\n| `Capture Page Screenshot` |                                        |\n| `File Should Exist`       | ${OUTPUTDIR}/selenium-screenshot-1.png |\n| ${path} =                 | `Capture Page Screenshot`              |\n| `File Should Exist`       | ${OUTPUTDIR}/selenium-screenshot-2.png |\n| `File Should Exist`       | ${path}                                |\n| `Capture Page Screenshot` | custom_name.png                        |\n| `File Should Exist`       | ${OUTPUTDIR}/custom_name.png           |\n| `Capture Page Screenshot` | custom_with_index_{index}.png          |\n| `File Should Exist`       | ${OUTPUTDIR}/custom_with_index_1.png   |\n| `Capture Page Screenshot` | formatted_index_{index:03}.png         |\n| `File Should Exist`       | ${OUTPUTDIR}/formatted_index_001.png   |"
    },
    {
      "name": "Checkbox Should Be Selected",
      "args": [
        "locator"
      ],
      "doc": "Verifies checkbox ``locator`` is selected/checked.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Checkbox Should Not Be Selected",
      "args": [
        "locator"
      ],
      "doc": "Verifies checkbox ``locator`` is not selected/checked.\n\nSee the `Locating elements` section for details about the locator\nsyntax.."
    },
    {
      "name": "Choose File",
      "args": [
        "locator",
        "file_path"
      ],
      "doc": "Inputs the ``file_path`` into file input field ``locator``.\n\nThis keyword is most often used to input files into upload forms.\nThe file specified with ``file_path`` must be available on machine\nwhere tests are executed.\n\nExample:\n| `Choose File` | my_upload_field | ${CURDIR}/trades.csv |"
    },
    {
      "name": "Clear Element Text",
      "args": [
        "locator"
      ],
      "doc": "Clears the value of text entry element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Click Button",
      "args": [
        "locator",
        "modifier=False"
      ],
      "doc": "Clicks button identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, buttons are\nsearched using ``id``, ``name`` and ``value``.\n\nSee the `Click Element` keyword for details about the\n``modifier`` argument.\n\nThe ``modifier`` argument is new in SeleniumLibrary 3.3"
    },
    {
      "name": "Click Element",
      "args": [
        "locator",
        "modifier=False"
      ],
      "doc": "Click element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``modifier`` argument can be used to pass\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys|Selenium Keys]\nwhen clicking the element. The `+` can be used as a separator\nfor different Selenium Keys. The `CTRL` is internally translated to\n`CONTROL` key. The ``modifier`` is space and case insensitive, example\n\"alt\" and \" aLt \" are supported formats to\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT|ALT key]\n. If ``modifier`` does not match to Selenium Keys, keyword fails.\n\nExample:\n| Click Element | id:button | | # Would click element without any modifiers. |\n| Click Element | id:button | CTRL | # Would click element with CTLR key pressed down. |\n| Click Element | id:button | CTRL+ALT | # Would click element with CTLR and ALT keys pressed down. |\n\nThe ``modifier`` argument is new in SeleniumLibrary 3.2"
    },
    {
      "name": "Click Element At Coordinates",
      "args": [
        "locator",
        "xoffset",
        "yoffset"
      ],
      "doc": "Click element ``locator`` at ``xoffset/yoffset``.\n\nCursor is moved and the center of the element and x/y coordinates are\ncalculated from that point.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Click Image",
      "args": [
        "locator",
        "modifier=False"
      ],
      "doc": "Clicks an image identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, images are searched\nusing ``id``, ``name``, ``src`` and ``alt``.\n\nSee the `Click Element` keyword for details about the\n``modifier`` argument.\n\nThe ``modifier`` argument is new in SeleniumLibrary 3.3"
    },
    {
      "name": "Click Link",
      "args": [
        "locator",
        "modifier=False"
      ],
      "doc": "Clicks a link identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, links are searched\nusing ``id``, ``name``, ``href`` and the link text.\n\nSee the `Click Element` keyword for details about the\n``modifier`` argument.\n\nThe ``modifier`` argument is new in SeleniumLibrary 3.3"
    },
    {
      "name": "Close All Browsers",
      "args": [],
      "doc": "Closes all open browsers and resets the browser cache.\n\nAfter this keyword new indexes returned from `Open Browser` keyword\nare reset to 1.\n\nThis keyword should be used in test or suite teardown to make sure\nall browsers are closed."
    },
    {
      "name": "Close Browser",
      "args": [],
      "doc": "Closes the current browser."
    },
    {
      "name": "Close Window",
      "args": [],
      "doc": "Closes currently opened pop-up window."
    },
    {
      "name": "Cover Element",
      "args": [
        "locator"
      ],
      "doc": "Will cover elements identified by ``locator`` with a blue div without breaking page layout.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nNew in SeleniumLibrary 3.3.0\n\nExample:\n|`Cover Element` | css:div#container |"
    },
    {
      "name": "Create Webdriver",
      "args": [
        "driver_name",
        "alias=None",
        "kwargs={}",
        "**init_kwargs"
      ],
      "doc": "Creates an instance of Selenium WebDriver.\n\nLike `Open Browser`, but allows passing arguments to the created\nWebDriver instance directly. This keyword should only be used if\nfunctionality provided by `Open Browser` is not adequate.\n\n``driver_name`` must be an WebDriver implementation name like Firefox,\nChrome, Ie, Opera, Safari, PhantomJS, or Remote.\n\nThe initialized WebDriver can be configured either with a Python\ndictionary ``kwargs`` or by using keyword arguments ``**init_kwargs``.\nThese arguments are passed directly to WebDriver without any\nprocessing. See [https://seleniumhq.github.io/selenium/docs/api/py/api.html|\nSelenium API documentation] for details about the supported arguments.\n\nExamples:\n| # Use proxy with Firefox   |                |                                           |                         |\n| ${proxy}=                  | `Evaluate`     | sys.modules['selenium.webdriver'].Proxy() | sys, selenium.webdriver |\n| ${proxy.http_proxy}=       | `Set Variable` | localhost:8888                            |                         |\n| `Create Webdriver`         | Firefox        | proxy=${proxy}                            |                         |\n| # Use proxy with PhantomJS |                |                                           |                         |\n| ${service args}=           | `Create List`  | --proxy=192.168.132.104:8888              |                         |\n| `Create Webdriver`         | PhantomJS      | service_args=${service args}              |                         |\n\nReturns the index of this browser instance which can be used later to\nswitch back to it. Index starts from 1 and is reset back to it when\n`Close All Browsers` keyword is used. See `Switch Browser` for an\nexample."
    },
    {
      "name": "Current Frame Should Contain",
      "args": [
        "text",
        "loglevel=TRACE"
      ],
      "doc": "Verifies that current frame contains ``text``.\n\nSee `Page Should Contain` for explanation about the ``loglevel``\nargument.\n\nPrior to SeleniumLibrary 3.0 this keyword was named\n`Current Frame Contains`."
    },
    {
      "name": "Current Frame Should Not Contain",
      "args": [
        "text",
        "loglevel=TRACE"
      ],
      "doc": "Verifies that current frame does not contains ``text``.\n\nSee `Page Should Contain` for explanation about the ``loglevel``\nargument."
    },
    {
      "name": "Delete All Cookies",
      "args": [],
      "doc": "Deletes all cookies."
    },
    {
      "name": "Delete Cookie",
      "args": [
        "name"
      ],
      "doc": "Deletes cookie matching ``name``.\n\nIf the cookie is not found, nothing happens."
    },
    {
      "name": "Double Click Element",
      "args": [
        "locator"
      ],
      "doc": "Double click element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Drag And Drop",
      "args": [
        "locator",
        "target"
      ],
      "doc": "Drags element identified by ``locator`` into ``target`` element.\n\nThe ``locator`` argument is the locator of the dragged element\nand the ``target`` is the locator of the target. See the\n`Locating elements` section for details about the locator syntax.\n\nExample:\n| `Drag And Drop` | css:div#element | css:div.target |"
    },
    {
      "name": "Drag And Drop By Offset",
      "args": [
        "locator",
        "xoffset",
        "yoffset"
      ],
      "doc": "Drags element identified with ``locator`` by ``xoffset/yoffset``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nElement will be moved by ``xoffset`` and ``yoffset``, each of which\nis a negative or positive number specifying the offset.\n\nExample:\n| `Drag And Drop By Offset` | myElem | 50 | -35 | # Move myElem 50px right and 35px down |"
    },
    {
      "name": "Element Attribute Value Should Be",
      "args": [
        "locator",
        "attribute",
        "expected",
        "message=None"
      ],
      "doc": "Verifies element identified by ``locator`` contains expected attribute value.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nExample:\n`Element Attribute Value Should Be` | css:img | href | value\n\nNew in SeleniumLibrary 3.2."
    },
    {
      "name": "Element Should Be Disabled",
      "args": [
        "locator"
      ],
      "doc": "Verifies that element identified with ``locator`` is disabled.\n\nThis keyword considers also elements that are read-only to be\ndisabled.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Element Should Be Enabled",
      "args": [
        "locator"
      ],
      "doc": "Verifies that element identified with ``locator`` is enabled.\n\nThis keyword considers also elements that are read-only to be\ndisabled.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Element Should Be Focused",
      "args": [
        "locator"
      ],
      "doc": "Verifies that element identified with ``locator`` is focused.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nNew in SeleniumLibrary 3.0."
    },
    {
      "name": "Element Should Be Visible",
      "args": [
        "locator",
        "message=None"
      ],
      "doc": "Verifies that the element identified by ``locator`` is visible.\n\nHerein, visible means that the element is logically visible, not\noptically visible in the current browser viewport. For example,\nan element that carries ``display:none`` is not logically visible,\nso using this keyword on that element would fail.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``message`` argument can be used to override the default error\nmessage."
    },
    {
      "name": "Element Should Contain",
      "args": [
        "locator",
        "expected",
        "message=None",
        "ignore_case=False"
      ],
      "doc": "Verifies that element ``locator`` contains text ``expected``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nThe ``ignore_case`` argument can be set to True to compare case\ninsensitive, default is False. New in SeleniumLibrary 3.1.\n\n``ignore_case`` argument new in SeleniumLibrary 3.1.\n\nUse `Element Text Should Be` if you want to match the exact text,\nnot a substring."
    },
    {
      "name": "Element Should Not Be Visible",
      "args": [
        "locator",
        "message=None"
      ],
      "doc": "Verifies that the element identified by ``locator`` is NOT visible.\n\nPasses if element does not exists. See `Element Should Be Visible`\nfor more information about visibility and supported arguments."
    },
    {
      "name": "Element Should Not Contain",
      "args": [
        "locator",
        "expected",
        "message=None",
        "ignore_case=False"
      ],
      "doc": "Verifies that element ``locator`` does not contains text ``expected``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nThe ``ignore_case`` argument can be set to True to compare case\ninsensitive, default is False.\n\n``ignore_case`` argument new in SeleniumLibrary 3.1."
    },
    {
      "name": "Element Text Should Be",
      "args": [
        "locator",
        "expected",
        "message=None",
        "ignore_case=False"
      ],
      "doc": "Verifies that element ``locator`` contains exact text ``expected``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nThe ``ignore_case`` argument can be set to True to compare case\ninsensitive, default is False.\n\n``ignore_case`` argument new in SeleniumLibrary 3.1.\n\nUse `Element Should Contain` if a substring match is desired."
    },
    {
      "name": "Element Text Should Not Be",
      "args": [
        "locator",
        "not_expected",
        "message=None",
        "ignore_case=False"
      ],
      "doc": "Verifies that element ``locator`` does not contain exact text ``not_expected``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nThe ``ignore_case`` argument can be set to True to compare case\ninsensitive, default is False.\n\nNew in SeleniumLibrary 3.1.1"
    },
    {
      "name": "Execute Async Javascript",
      "args": [
        "*code"
      ],
      "doc": "Executes asynchronous JavaScript code with possible arguments.\n\nSimilar to `Execute Javascript` except that scripts executed with\nthis keyword must explicitly signal they are finished by invoking the\nprovided callback. This callback is always injected into the executed\nfunction as the last argument.\n\nScripts must complete within the script timeout or this keyword will\nfail. See the `Timeout` section for more information.\n\nStarting from SeleniumLibrary 3.2 it is possible to provide JavaScript\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script|\narguments] as part of ``code`` argument. See `Execute Javascript` for\nmore details.\n\nExamples:\n| `Execute Async JavaScript` | var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000); |\n| `Execute Async JavaScript` | ${CURDIR}/async_js_to_execute.js |\n| ${result} = | `Execute Async JavaScript`                      |\n| ...         | var callback = arguments[arguments.length - 1]; |\n| ...         | function answer(){callback(\"text\");};           |\n| ...         | window.setTimeout(answer, 2000);                |\n| `Should Be Equal` | ${result} | text |"
    },
    {
      "name": "Execute Javascript",
      "args": [
        "*code"
      ],
      "doc": "Executes the given JavaScript code with possible arguments.\n\n``code`` may be divided into multiple cells in the test data and\n``code`` may contain multiple lines of code and arguments. In that case,\nthe JavaScript code parts are concatenated together without adding\nspaces and optional arguments are separated from ``code``.\n\nIf ``code`` is a path to an existing file, the JavaScript\nto execute will be read from that file. Forward slashes work as\na path separator on all operating systems.\n\nThe JavaScript executes in the context of the currently selected\nframe or window as the body of an anonymous function. Use ``window``\nto refer to the window of your application and ``document`` to refer\nto the document object of the current frame or window, e.g.\n``document.getElementById('example')``.\n\nThis keyword returns whatever the executed JavaScript code returns.\nReturn values are converted to the appropriate Python types.\n\nStarting from SeleniumLibrary 3.2 it is possible to provide JavaScript\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script|\narguments] as part of ``code`` argument. The JavaScript code and\narguments must be separated with `JAVASCRIPT` and `ARGUMENTS` markers\nand must used exactly with this format. If the Javascript code is\nfirst, then the `JAVASCRIPT` marker is optional. The order of\n`JAVASCRIPT` and `ARGUMENTS` markers can swapped, but if `ARGUMENTS`\nis first marker, then `JAVASCRIPT` marker is mandatory. It is only\nallowed to use `JAVASCRIPT` and `ARGUMENTS` markers only one time in the\n``code`` argument.\n\nExamples:\n| `Execute JavaScript` | window.myFunc('arg1', 'arg2') |\n| `Execute JavaScript` | ${CURDIR}/js_to_execute.js    |\n| `Execute JavaScript` | alert(arguments[0]); | ARGUMENTS | 123 |\n| `Execute JavaScript` | ARGUMENTS | 123 | JAVASCRIPT | alert(arguments[0]); |"
    },
    {
      "name": "Frame Should Contain",
      "args": [
        "locator",
        "text",
        "loglevel=TRACE"
      ],
      "doc": "Verifies that frame identified by ``locator`` contains ``text``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nSee `Page Should Contain` for explanation about the ``loglevel``\nargument."
    },
    {
      "name": "Get All Links",
      "args": [],
      "doc": "Returns a list containing ids of all links found in current page.\n\nIf a link has no id, an empty string will be in the list instead."
    },
    {
      "name": "Get Browser Aliases",
      "args": [],
      "doc": "Returns aliases of all active browser that has an alias as NormalizedDict. The dictionary contains the aliases as keys and the index as value. This can be accessed as dictionary ``${aliases.key}`` or as list ``@{aliases}[0]``.\n\nExample:\n| `Open Browser` | https://example.com | alias=BrowserA |                            |\n| `Open Browser` | https://example.com | alias=BrowserB |                            |\n| &{aliases} | `Get Browser Aliases` |     | # &{aliases} = { BrowserA=1|BrowserB=2 } |\n| Log | ${aliases.BrowserA} |     | # logs ``1``     |\n| FOR | ${alias} | IN | @{aliases}     |\n|       | Log | ${alias} | # logs ``BrowserA`` and ``BrowserB`` |\n| END | | | |\n\nSee `Switch Browser` for more information and examples.\nNew in SeleniumLibrary 4.0"
    },
    {
      "name": "Get Browser Ids",
      "args": [],
      "doc": "Returns index of all active browser as list.\n\nExample:\n| @{browser_ids}= | Get Browser Ids |     |      |\n| FOR | ${id} | IN | @{browser_ids}     |\n|        | @{window_titles}=  | Get Window Titles | browser=${id} |\n|       | Log | Browser ${id} has these windows: ${window_titles} |     |\n| END | | | |\n\nSee `Switch Browser` for more information and examples.\nNew in SeleniumLibrary 4.0"
    },
    {
      "name": "Get Cookie",
      "args": [
        "name"
      ],
      "doc": "Returns information of cookie with ``name`` as an object.\n\nIf no cookie is found with ``name``, keyword fails. The cookie object\ncontains details about the cookie. Attributes available in the object\nare documented in the table below.\n\n| = Attribute = |             = Explanation =                                |\n| name          | The name of a cookie.                                      |\n| value         | Value of the cookie.                                       |\n| path          | Indicates a URL path, for example ``/``.                   |\n| domain        | The domain the cookie is visible to.                       |\n| secure        | When true, cookie is only used with HTTPS connections.     |\n| httpOnly      | When true, cookie is not accessible via JavaScript.        |\n| expiry        | Python datetime object indicating when the cookie expires. |\n\nSee the\n[https://w3c.github.io/webdriver/webdriver-spec.html#cookies|WebDriver specification]\nfor details about the cookie information.\nNotice that ``expiry`` is specified as a\n[https://docs.python.org/3/library/datetime.html#datetime.datetime|datetime object],\nnot as seconds since Unix Epoch like WebDriver natively does.\n\nExample:\n| `Add Cookie`      | foo             | bar |\n| ${cookie} =       | `Get Cookie`    | foo |\n| `Should Be Equal` | ${cookie.name}  | bar |\n| `Should Be Equal` | ${cookie.value} | foo |\n| `Should Be True`  | ${cookie.expiry.year} > 2017 |\n\nNew in SeleniumLibrary 3.0."
    },
    {
      "name": "Get Cookies",
      "args": [
        "as_dict=False"
      ],
      "doc": "Returns all cookies of the current page.\n\nIf ``as_dict`` argument evaluates as false, see `Boolean arguments` \nfor more details, then cookie information is returned as \na single string in format ``name1=value1; name2=value2; name3=value3``.\nWhen ``as_dict`` argument evaluates as true, cookie information\nis returned as Robot Framework dictionary format. The string format \ncan be used, for example, for logging purposes or in headers when\nsending HTTP requests. The dictionary format is helpful when\nthe result can be passed to requests library's Create Session\nkeyword's optional cookies parameter.\n\nThe `` as_dict`` argument is new in SeleniumLibrary 3.3"
    },
    {
      "name": "Get Element Attribute",
      "args": [
        "locator",
        "attribute"
      ],
      "doc": "Returns value of ``attribute`` from element ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nExample:\n| ${id}= | `Get Element Attribute` | css:h1 | id |\n\nPassing attribute name as part of the ``locator`` was removed\nin SeleniumLibrary 3.2. The explicit ``attribute`` argument\nshould be used instead."
    },
    {
      "name": "Get Element Count",
      "args": [
        "locator"
      ],
      "doc": "Returns number of elements matching ``locator``.\n\nIf you wish to assert the number of matching elements, use\n`Page Should Contain Element` with ``limit`` argument. Keyword will\nalways return an integer.\n\nExample:\n| ${count} =       | `Get Element Count` | name:div_name  |\n| `Should Be True` | ${count} > 2        |                |\n\nNew in SeleniumLibrary 3.0."
    },
    {
      "name": "Get Element Size",
      "args": [
        "locator"
      ],
      "doc": "Returns width and height of element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nBoth width and height are returned as integers.\n\nExample:\n| ${width} | ${height} = | `Get Element Size` | css:div#container |"
    },
    {
      "name": "Get Horizontal Position",
      "args": [
        "locator"
      ],
      "doc": "Returns horizontal position of element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe position is returned in pixels off the left side of the page,\nas an integer.\n\nSee also `Get Vertical Position`."
    },
    {
      "name": "Get List Items",
      "args": [
        "locator",
        "values=False"
      ],
      "doc": "Returns all labels or values of selection list ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nReturns visible labels by default, but values can be returned by\nsetting the ``values`` argument to a true value (see `Boolean\narguments`).\n\nExample:\n| ${labels} = | `Get List Items` | mylist              |             |\n| ${values} = | `Get List Items` | css:#example select | values=True |\n\nSupport to return values is new in SeleniumLibrary 3.0."
    },
    {
      "name": "Get Location",
      "args": [],
      "doc": "Returns the current browser URL."
    },
    {
      "name": "Get Locations",
      "args": [],
      "doc": "Returns and logs URLs of all known browser windows."
    },
    {
      "name": "Get Selected List Label",
      "args": [
        "locator"
      ],
      "doc": "Returns label of selected option from selection list ``locator``.\n\nIf there are multiple selected options, label of the first option\nis returned.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Get Selected List Labels",
      "args": [
        "locator"
      ],
      "doc": "Returns labels of selected options from selection list ``locator``.\n\nStarting from SeleniumLibrary 3.0, returns an empty list if there\nare no selections. In earlier versions this caused an error.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Get Selected List Value",
      "args": [
        "locator"
      ],
      "doc": "Returns value of selected option from selection list ``locator``.\n\nIf there are multiple selected options, value of the first option\nis returned.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Get Selected List Values",
      "args": [
        "locator"
      ],
      "doc": "Returns values of selected options from selection list ``locator``.\n\nStarting from SeleniumLibrary 3.0, returns an empty list if there\nare no selections. In earlier versions this caused an error.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Get Selenium Implicit Wait",
      "args": [],
      "doc": "Gets the implicit wait value used by Selenium.\n\nThe value is returned as a human readable string like ``1 second``.\n\nSee the `Implicit wait` section above for more information."
    },
    {
      "name": "Get Selenium Speed",
      "args": [],
      "doc": "Gets the delay that is waited after each Selenium command.\n\nThe value is returned as a human readable string like ``1 second``.\n\nSee the `Selenium Speed` section above for more information."
    },
    {
      "name": "Get Selenium Timeout",
      "args": [],
      "doc": "Gets the timeout that is used by various keywords.\n\nThe value is returned as a human readable string like ``1 second``.\n\nSee the `Timeout` section above for more information."
    },
    {
      "name": "Get Session Id",
      "args": [],
      "doc": "Returns the currently active browser session id.\n\nNew in SeleniumLibrary 3.2"
    },
    {
      "name": "Get Source",
      "args": [],
      "doc": "Returns the entire HTML source of the current page or frame."
    },
    {
      "name": "Get Table Cell",
      "args": [
        "locator",
        "row",
        "column",
        "loglevel=TRACE"
      ],
      "doc": "Returns contents of table cell.\n\nThe table is located using the ``locator`` argument and its cell\nfound using ``row`` and ``column``. See the `Locating elements`\nsection for details about the locator syntax.\n\nBoth row and column indexes start from 1, and header and footer\nrows are included in the count. It is possible to refer to rows\nand columns from the end by using negative indexes so that -1\nis the last row/column, -2 is the second last, and so on.\n\nAll ``<th>`` and ``<td>`` elements anywhere in the table are\nconsidered to be cells.\n\nSee `Page Should Contain` for explanation about the ``loglevel``\nargument."
    },
    {
      "name": "Get Text",
      "args": [
        "locator"
      ],
      "doc": "Returns the text value of element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Get Title",
      "args": [],
      "doc": "Returns the title of current page."
    },
    {
      "name": "Get Value",
      "args": [
        "locator"
      ],
      "doc": "Returns the value attribute of element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Get Vertical Position",
      "args": [
        "locator"
      ],
      "doc": "Returns vertical position of element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe position is returned in pixels off the top of the page,\nas an integer.\n\nSee also `Get Horizontal Position`."
    },
    {
      "name": "Get WebElement",
      "args": [
        "locator"
      ],
      "doc": "Returns the first WebElement matching the given ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Get WebElements",
      "args": [
        "locator"
      ],
      "doc": "Returns list of WebElement objects matching the ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nStarting from SeleniumLibrary 3.0, the keyword returns an empty\nlist if there are no matching elements. In previous releases the\nkeyword failed in this case."
    },
    {
      "name": "Get Window Handles",
      "args": [],
      "doc": "Return all current window handles as a list.\n\nCan be used as a list of windows to exclude with `Select Window`.\n\nPrior to SeleniumLibrary 3.0, this keyword was named `List Windows`."
    },
    {
      "name": "Get Window Identifiers",
      "args": [],
      "doc": "Returns and logs id attributes of all known browser windows."
    },
    {
      "name": "Get Window Names",
      "args": [],
      "doc": "Returns and logs names of all known browser windows."
    },
    {
      "name": "Get Window Position",
      "args": [],
      "doc": "Returns current window position.\n\nPosition is relative to the top left corner of the screen. Returned\nvalues are integers. See also `Set Window Position`.\n\nExample:\n| ${x} | ${y}= | `Get Window Position` |"
    },
    {
      "name": "Get Window Size",
      "args": [],
      "doc": "Returns current window width and height as integers.\n\nSee also `Set Window Size`.\n\nExample:\n| ${width} | ${height}= | `Get Window Size` |"
    },
    {
      "name": "Get Window Titles",
      "args": [],
      "doc": "Returns and logs titles of all known browser windows."
    },
    {
      "name": "Go Back",
      "args": [],
      "doc": "Simulates the user clicking the back button on their browser."
    },
    {
      "name": "Go To",
      "args": [
        "url"
      ],
      "doc": "Navigates the active browser instance to the provided ``url``."
    },
    {
      "name": "Handle Alert",
      "args": [
        "action=ACCEPT",
        "timeout=None"
      ],
      "doc": "Handles the current alert and returns its message.\n\nBy default the alert is accepted, but this can be controlled\nwith the ``action`` argument that supports the following\ncase-insensitive values:\n\n- ``ACCEPT``: Accept the alert i.e. press ``Ok``. Default.\n- ``DISMISS``: Dismiss the alert i.e. press ``Cancel``.\n- ``LEAVE``: Leave the alert open.\n\nThe ``timeout`` argument specifies how long to wait for the alert\nto appear. If it is not given, the global default `timeout` is used\ninstead.\n\nExamples:\n| Handle Alert |                |       | # Accept alert.  |\n| Handle Alert | action=DISMISS |       | # Dismiss alert. |\n| Handle Alert | timeout=10 s   |       | # Use custom timeout and accept alert.  |\n| Handle Alert | DISMISS        | 1 min | # Use custom timeout and dismiss alert. |\n| ${message} = | Handle Alert   |       | # Accept alert and get its message.     |\n| ${message} = | Handle Alert   | LEAVE | # Leave alert open and get its message. |\n\nNew in SeleniumLibrary 3.0."
    },
    {
      "name": "Input Password",
      "args": [
        "locator",
        "password"
      ],
      "doc": "Types the given password into text field identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nDifference compared to `Input Text` is that this keyword does not\nlog the given password on the INFO level. Notice that if you use\nthe keyword like\n\n| Input Password | password_field | password |\n\nthe password is shown as a normal keyword argument. A way to avoid\nthat is using variables like\n\n| Input Password | password_field | ${PASSWORD} |\n\nNotice also that SeleniumLibrary logs all the communication with\nbrowser drivers using the DEBUG level, and the actual password can\nbe seen there. Additionally Robot Framework logs all arguments using\nthe TRACE level. Tests must thus not be executed using level below\nINFO if password should not be logged in any format."
    },
    {
      "name": "Input Text",
      "args": [
        "locator",
        "text"
      ],
      "doc": "Types the given ``text`` into text field identified by ``locator``.\n\nUse `Input Password` if you do not want the given ``text`` to be\nlogged.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Input Text Into Alert",
      "args": [
        "text",
        "action=ACCEPT",
        "timeout=None"
      ],
      "doc": "Types the given ``text`` into an input field in an alert.\n\nThe alert is accepted by default, but that behavior can be controlled\nby using the ``action`` argument same way as with `Handle Alert`.\n\n``timeout`` specifies how long to wait for the alert to appear.\nIf it is not given, the global default `timeout` is used instead.\n\nNew in SeleniumLibrary 3.0."
    },
    {
      "name": "List Selection Should Be",
      "args": [
        "locator",
        "*expected"
      ],
      "doc": "Verifies selection list ``locator`` has ``expected`` options selected.\n\nIt is possible to give expected options both as visible labels and\nas values. Starting from SeleniumLibrary 3.0, mixing labels and\nvalues is not possible. Order of the selected options is not\nvalidated.\n\nIf no expected options are given, validates that the list has\nno selections. A more explicit alternative is using `List Should\nHave No Selections`.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nExamples:\n| `List Selection Should Be` | gender    | Female          |        |\n| `List Selection Should Be` | interests | Test Automation | Python |"
    },
    {
      "name": "List Should Have No Selections",
      "args": [
        "locator"
      ],
      "doc": "Verifies selection list ``locator`` has no options selected.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Location Should Be",
      "args": [
        "url",
        "message=None"
      ],
      "doc": "Verifies that current URL is exactly ``url``.\n\nThe ``url`` argument contains the exact url that should exist in browser.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\n``message`` argument new in SeleniumLibrary 3.2.0."
    },
    {
      "name": "Location Should Contain",
      "args": [
        "expected",
        "message=None"
      ],
      "doc": "Verifies that current URL contains ``expected``.\n\nThe ``url`` argument contains the expected value in url.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\n``message`` argument new in SeleniumLibrary 3.2.0."
    },
    {
      "name": "Locator Should Match X Times",
      "args": [
        "locator",
        "x",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "**DEPRECATED in SeleniumLibrary 4.0.**, use `Page Should Contain Element` with ``limit`` argument instead."
    },
    {
      "name": "Log Location",
      "args": [],
      "doc": "Logs and returns the current URL."
    },
    {
      "name": "Log Source",
      "args": [
        "loglevel=INFO"
      ],
      "doc": "Logs and returns the HTML source of the current page or frame.\n\nThe ``loglevel`` argument defines the used log level. Valid log\nlevels are ``WARN``, ``INFO`` (default), ``DEBUG``, ``TRACE``\nand ``NONE`` (no logging)."
    },
    {
      "name": "Log Title",
      "args": [],
      "doc": "Logs and returns the title of current page."
    },
    {
      "name": "Maximize Browser Window",
      "args": [],
      "doc": "Maximizes current browser window."
    },
    {
      "name": "Mouse Down",
      "args": [
        "locator"
      ],
      "doc": "Simulates pressing the left mouse button on the element ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe element is pressed without releasing the mouse button.\n\nSee also the more specific keywords `Mouse Down On Image` and\n`Mouse Down On Link`."
    },
    {
      "name": "Mouse Down On Image",
      "args": [
        "locator"
      ],
      "doc": "Simulates a mouse down event on an image identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, images are searched\nusing ``id``, ``name``, ``src`` and ``alt``."
    },
    {
      "name": "Mouse Down On Link",
      "args": [
        "locator"
      ],
      "doc": "Simulates a mouse down event on a link identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, links are searched\nusing ``id``, ``name``, ``href`` and the link text."
    },
    {
      "name": "Mouse Out",
      "args": [
        "locator"
      ],
      "doc": "Simulates moving mouse away from the element ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Mouse Over",
      "args": [
        "locator"
      ],
      "doc": "Simulates hovering mouse over the element ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Mouse Up",
      "args": [
        "locator"
      ],
      "doc": "Simulates releasing the left mouse button on the element ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Open Browser",
      "args": [
        "url",
        "browser=firefox",
        "alias=None",
        "remote_url=False",
        "desired_capabilities=None",
        "ff_profile_dir=None",
        "options=None",
        "service_log_path=None"
      ],
      "doc": "Opens a new browser instance to the given ``url``.\n\nThe ``browser`` argument specifies which browser to use, and the\nsupported browser are listed in the table below. The browser names\nare case-insensitive and some browsers have multiple supported names.\n\n|    = Browser =    |        = Name(s) =       |\n| Firefox           | firefox, ff              |\n| Google Chrome     | googlechrome, chrome, gc |\n| Headless Firefox  | headlessfirefox          |\n| Headless Chrome   | headlesschrome           |\n| Internet Explorer | internetexplorer, ie     |\n| Edge              | edge                     |\n| Safari            | safari                   |\n| Opera             | opera                    |\n| Android           | android                  |\n| Iphone            | iphone                   |\n| PhantomJS         | phantomjs                |\n| HTMLUnit          | htmlunit                 |\n| HTMLUnit with Javascript | htmlunitwithjs    |\n\nTo be able to actually use one of these browsers, you need to have\na matching Selenium browser driver available. See the\n[https://github.com/robotframework/SeleniumLibrary#browser-drivers|\nproject documentation] for more details. Headless Firefox and\nHeadless Chrome are new additions in SeleniumLibrary 3.1.0\nand require Selenium 3.8.0 or newer.\n\nOptional ``alias`` is an alias given for this browser instance and\nit can be used for switching between browsers. An alternative\napproach for switching is using an index returned by this keyword.\nThese indices start from 1, are incremented when new browsers are\nopened, and reset back to 1 when `Close All Browsers` is called.\nSee `Switch Browser` for more information and examples.\n\nOptional ``remote_url`` is the URL for a\n[https://github.com/SeleniumHQ/selenium/wiki/Grid2|Selenium Grid].\n\nOptional ``desired_capabilities`` can be used to configure, for example,\nlogging preferences for a browser or a browser and operating system\nwhen using [http://saucelabs.com|Sauce Labs]. Desired capabilities can\nbe given either as a Python dictionary or as a string in format\n``key1:value1,key2:value2``.\n[https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities|\nSelenium documentation] lists possible capabilities that can be\nenabled.\n\nOptional ``ff_profile_dir`` is the path to the Firefox profile\ndirectory if you wish to overwrite the default profile Selenium\nuses. Notice that prior to SeleniumLibrary 3.0, the library\ncontained its own profile that was used by default.\n\nExamples:\n| `Open Browser` | http://example.com | Chrome  |\n| `Open Browser` | http://example.com | Firefox | alias=Firefox |\n| `Open Browser` | http://example.com | Edge    | remote_url=http://127.0.0.1:4444/wd/hub |\n\nIf the provided configuration options are not enough, it is possible\nto use `Create Webdriver` to customize browser initialization even\nmore.\n\nApplying ``desired_capabilities`` argument also for local browser is\nnew in SeleniumLibrary 3.1.\n\nTo be able to actually use one of these browsers, you need to have a matching Selenium browser driver available. See the [https://github.com/robotframework/SeleniumLibrary#browser-drivers|project documentation] for more details. Headless Firefox and Headless Chrome are new additions in SeleniumLibrary 3.1.0 and require Selenium 3.8.0 or newer.\n\nOptional ``alias`` is an alias given for this browser instance and it can be used for switching between browsers. When same ``alias`` is given with two `Open Browser` keywords, the first keyword will open a new browser, but the second one will switch to the already opened browser and will not open a new browser. The ``alias`` definition overrules ``browser`` definition. When same ``alias`` is used but a different ``browser`` is defined, then switch to a browser with same alias is done and new browser is not opened. An alternative approach for switching is using an index returned by this keyword. These indices start from 1, are incremented when new browsers are opened, and reset back to 1 when `Close All Browsers` is called. See `Switch Browser` for more information and examples.\n\nOptional ``remote_url`` is the URL for a [https://github.com/SeleniumHQ/selenium/wiki/Grid2|Selenium Grid].\n\nOptional ``desired_capabilities`` can be used to configure, for example, logging preferences for a browser or a browser and operating system when using [http://saucelabs.com/|Sauce Labs]. Desired capabilities can be given either as a Python dictionary or as a string in the format ``key1:value1,key2:value2``. [https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities|Selenium documentation] lists possible capabilities that can be enabled.\n\nOptional ``ff_profile_dir`` is the path to the Firefox profile directory if you wish to overwrite the default profile Selenium uses. Notice that prior to SeleniumLibrary 3.0, the library contained its own profile that was used by default. The ``ff_profile_dir`` can also be an instance of the [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html|selenium.webdriver.FirefoxProfile] . As a third option, it is possible to use *FirefoxProfile* methods and attributes to define the profile using methods and attributes in the same way as with ``options`` argument. Example: It is possible to use FirefoxProfile *set_preference* to define different profile settings.\n\nOptional ``options`` argument allows defining browser specific Selenium options. Example for Chrome, the ``options`` argument allows defining the following [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options|methods and attributes] and for Firefox these [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox#selenium.webdriver.firefox.options.Options|methods and attributes] are available. Please note that not all browsers, supported by the SeleniumLibrary, have Selenium options available. Therefore please consult the Selenium documentation which browsers do support the Selenium options. If ``browser`` argument is *android* then [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options|Chrome options] is used. Selenium options are also supported, when ``remote_url`` argument is used.\n\nThe SeleniumLibrary ``options`` argument accepts Selenium options in two different formats: as a string and as Python object which is an instance of the Selenium options class.\n\nThe string format allows defining Selenium options methods or attributes and their arguments in Robot Framework test data. The method and attributes names are case and space sensitive and must match to the Selenium options methods and attributes names. When defining a method, it must be defined in a similar way as in python: method name, opening parenthesis, zero to many arguments and closing parenthesis. If there is a need to define multiple arguments for a single method, arguments must be separated with comma, just like in Python. Example: *add_argument(\"--headless\")* or *add_experimental_option(\"key\", \"value\")*. Attributes are defined in a similar way as in Python: attribute name, equal sign, and attribute value. Example, *headless=True*. Multiple methods and attributes must be separated by a semicolon. Example: *add_argument(\"--headless\");add_argument(\"--start-maximized\")*.\n\nArguments allow defining Python data types and arguments are evaluated by using Python [https://docs.python.org/3/library/ast.html#ast.literal_eval|ast.literal_eval]. Strings must be quoted with single or double quotes, example \"value\" or 'value'. It is also possible to define other Python builtin data types, example *True* or *None*, by not using quotes around the arguments.\n\nThe string format is space friendly. Usually, spaces do not alter the defining methods or attributes. There are two exceptions. In some Robot Framework test data formats, two or more spaces are considered as cell separator and instead of defining a single argument, two or more arguments may be defined. Spaces in string arguments are not removed and are left as is. Example *add_argument ( \"--headless\" )* is same as *add_argument(\"--headless\")*. But *add_argument(\" --headless \")* is not same same as *add_argument ( \"--headless\" )*, because spaces inside of quotes are not removed.\n\nAs last format, ``options`` argument also supports receiving the Selenium options as Python class instance. In this case, the instance is used as-is and the SeleniumLibrary will not convert the instance to other formats. For example, if the following code return value is saved to *${options}* variable in the Robot Framework data:\n\n```\noptions = webdriver.ChromeOptions()\noptions.add_argument('--disable-dev-shm-usage')\nreturn options\n```\n\nThen the *${options}* variable can be used as an argument to options.\n\nOptional ``service_log_path`` argument defines the name of the file where to write the browser driver logs. If the ``service_log_path`` argument contain a marker ``{index}``, it will be automatically replaced with unique running index preventing files to be overwritten. Indices start's from 1, and how they are represented can be customized using Python's [https://docs.python.org/3/library/string.html#format-string-syntax|format string syntax].\n\nExamples:\n\n| `Open Browser`    | http://example.com | Chrome  |                                         |\n| `Open Browser`    | http://example.com | Firefox | alias=Firefox                           |\n| `Open Browser`    | http://example.com | Edge    | remote_url=http://127.0.0.1:4444/wd/hub |\n| `Open Browser`    | about:blank        |         |                                         |\n\nAlias examples:\n\n| ${1_index} =   | `Open Browser`  |  http://example.com | Chrome  | alias=Chrome     | # Opens new browser because alias is new.         |\n| ${2_index} =    | `Open Browser`  |  http://example.com | Firefox |                  | # Opens new browser because alias is not defined. |\n| ${3_index} =    | `Open Browser`  |  http://example.com | Chrome  | alias=Chrome     | # Switches to the browser with Chrome alias.      |\n| ${4_index} =    | `Open Browser`  |  http://example.com | Chrome  | alias=${1_index} | # Switches to the browser with Chrome alias.      |\n| Should Be Equal | ${1_index}      | ${3_index}          |         |                  |                                                   |\n| Should Be Equal | ${1_index}      | ${4_index}          |         |                  |                                                   |\n| Should Be Equal | ${2_index}      | ${2}                |         |                  |                                                   |\n\nExample when using `Chrome options` method:\n\n| Open Browser  |  http://example.com | Chrome « options=add_argument(\"--disable-popup-blocking\"); add_argument(\"--ignore-certificate-errors\")  | # Sting format |\n| ${options} =  |  `Get Options`    |     # Selenium options instance |\n| Open Browser  |  http://example.com | Chrome | options=${options} | |\n\nExample for FirefoxProfile\n\n| `Open Browser` | http://example.com | Firefox | ff_profile_dir=/path/to/profile | # Using profile from disk|\n| `Open Browser` | http://example.com | Firefox | ff_profile_dir=${FirefoxProfile_instance}  | # Using instance of FirefoxProfile|\n| `Open Browser` | http://example.com | Firefox | ff_profile_dir=set_preference(\"key\", \"value\");set_preference(\"other\", \"setting\")   | # Defining profile using FirefoxProfile mehtods|\n\nIf the provided configuration options are not enough, it is possible to use `Create Webdriver` to customize browser initialization even more.\n\nApplying ``desired_capabilities`` argument also for local browser is new in SeleniumLibrary 3.1.\n\nUsing ``alias`` to decide, is the new browser opened is new in SeleniumLibrary 4.0. The ``options`` and ``service_log_path`` are new in SeleniumLibrary 4.0. Support for ``ff_profile_dir`` accepting an instance of the *selenium.webdriver.FirefoxProfile* and support defining FirefoxProfile with methods and attributes are new in SeleniumLibrary 4.0."
    },
    {
      "name": "Open Context Menu",
      "args": [
        "locator"
      ],
      "doc": "Opens context menu on element identified by ``locator``."
    },
    {
      "name": "Page Should Contain",
      "args": [
        "text",
        "loglevel=TRACE"
      ],
      "doc": "Verifies that current page contains ``text``.\n\nIf this keyword fails, it automatically logs the page source\nusing the log level specified with the optional ``loglevel``\nargument. Valid log levels are ``DEBUG``, ``INFO`` (default),\n``WARN``, and ``NONE``. If the log level is ``NONE`` or below\nthe current active log level the source will not be logged."
    },
    {
      "name": "Page Should Contain Button",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies button ``locator`` is found from current page.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, buttons are\nsearched using ``id``, ``name`` and ``value``."
    },
    {
      "name": "Page Should Contain Checkbox",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies checkbox ``locator`` is found from current page.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Page Should Contain Element",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE",
        "limit=None"
      ],
      "doc": "Verifies that element ``locator`` is found on the current page.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\nThe ``limit`` argument can used to define how many elements the\npage should contain. When ``limit`` is ``None`` (default) page can\ncontain one or more elements. When limit is a number, page must\ncontain same number of elements.\n\nSee `Page Should Contain` for explanation about the ``loglevel``\nargument.\n\nExamples assumes that locator matches to two elements.\n| `Page Should Contain Element` | div_name | limit=1    | # Keyword fails.                  |\n| `Page Should Contain Element` | div_name | limit=2    | # Keyword passes.                 |\n| `Page Should Contain Element` | div_name | limit=none | # None is considered one or more. |\n| `Page Should Contain Element` | div_name |            | # Same as above.                  |\n\nThe ``limit`` argument is new in SeleniumLibrary 3.0."
    },
    {
      "name": "Page Should Contain Image",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies image identified by ``locator`` is found from current page.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, images are searched\nusing ``id``, ``name``, ``src`` and ``alt``.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments."
    },
    {
      "name": "Page Should Contain Link",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies link identified by ``locator`` is found from current page.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, links are searched\nusing ``id``, ``name``, ``href`` and the link text.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments."
    },
    {
      "name": "Page Should Contain List",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies selection list ``locator`` is found from current page.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Page Should Contain Radio Button",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies radio button ``locator`` is found from current page.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, radio buttons are\nsearched using ``id``, ``name`` and ``value``."
    },
    {
      "name": "Page Should Contain Textfield",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies text field ``locator`` is found from current page.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Page Should Not Contain",
      "args": [
        "text",
        "loglevel=TRACE"
      ],
      "doc": "Verifies the current page does not contain ``text``.\n\nSee `Page Should Contain` for explanation about the ``loglevel``\nargument."
    },
    {
      "name": "Page Should Not Contain Button",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies button ``locator`` is not found from current page.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, buttons are\nsearched using ``id``, ``name`` and ``value``."
    },
    {
      "name": "Page Should Not Contain Checkbox",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies checkbox ``locator`` is not found from current page.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Page Should Not Contain Element",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies that element ``locator`` is found on the current page.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nSee `Page Should Contain` for explanation about ``message`` and\n``loglevel`` arguments."
    },
    {
      "name": "Page Should Not Contain Image",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies image identified by ``locator`` is found from current page.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, images are searched\nusing ``id``, ``name``, ``src`` and ``alt``.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments."
    },
    {
      "name": "Page Should Not Contain Link",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies link identified by ``locator`` is not found from current page.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, links are searched\nusing ``id``, ``name``, ``href`` and the link text.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments."
    },
    {
      "name": "Page Should Not Contain List",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies selection list ``locator`` is not found from current page.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Page Should Not Contain Radio Button",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies radio button ``locator`` is not found from current page.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax. When using the default locator strategy, radio buttons are\nsearched using ``id``, ``name`` and ``value``."
    },
    {
      "name": "Page Should Not Contain Textfield",
      "args": [
        "locator",
        "message=None",
        "loglevel=TRACE"
      ],
      "doc": "Verifies text field ``locator`` is not found from current page.\n\nSee `Page Should Contain Element` for explanation about ``message``\nand ``loglevel`` arguments.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Press Key",
      "args": [
        "locator",
        "key"
      ],
      "doc": "**DEPRECATED in SeleniumLibrary 4.0.** use `Press Keys` instead."
    },
    {
      "name": "Press Keys",
      "args": [
        "locator=None",
        "*keys"
      ],
      "doc": "Simulates user pressing key(s) to an element or on the active browser.\n\n\nIf ``locator`` evaluates as false, see `Boolean arguments` for more\ndetails, then the ``keys`` are sent to the currently active browser.\nOtherwise element is searched and ``keys`` are send to the element\nidentified by the ``locator``. In later case, keyword fails if element\nis not found. See the `Locating elements` section for details about\nthe locator syntax.\n\n``keys`` arguments can contain one or many strings, but it can not\nbe empty. ``keys`` can also be a combination of\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html|Selenium Keys]\nand strings or a single Selenium Key. If Selenium Key is combined\nwith strings, Selenium key and strings must be separated by the\n`+` character, like in `CONTROL+c`. Selenium Keys\nare space and case sensitive and Selenium Keys are not parsed\ninside of the string. Example AALTO, would send string `AALTO`\nand `ALT` not parsed inside of the string. But `A+ALT+O` would\nfound Selenium ALT key from the ``keys`` argument. It also possible\nto press many Selenium Keys down at the same time, example\n'ALT+ARROW_DOWN`.\n\nIf Selenium Keys are detected in the ``keys`` argument, keyword\nwill press the Selenium Key down, send the strings and\n then release the Selenium Key. If keyword needs to send a Selenium\nKey as a string, then each character must be separated with\n`+` character, example `E+N+D`.\n\n`CTRL` is alias for\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL|Selenium CONTROL]\nand ESC is alias for\n[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE|Selenium ESCAPE]\n\nNew in SeleniumLibrary 3.3\n\nExamples:\n| `Press Keys` | text_field | AAAAA          |            | # Sends string \"AAAAA\" to element.                                                |\n| `Press Keys` | None       | BBBBB          |            | # Sends string \"BBBBB\" to currently active browser.                               |\n| `Press Keys` | text_field | E+N+D          |            | # Sends string \"END\" to element.                                                  |\n| `Press Keys` | text_field | XXX            | YY         | # Sends strings \"XXX\" and \"YY\" to element.                                        |\n| `Press Keys` | text_field | XXX+YY         |            | # Same as above.                                                                  |\n| `Press Keys` | text_field | ALT+ARROW_DOWN |            | # Pressing \"ALT\" key down, then pressing ARROW_DOWN and then releasing both keys. |\n| `Press Keys` | text_field | ALT            | ARROW_DOWN | # Pressing \"ALT\" key and then pressing ARROW_DOWN.                                |\n| `Press Keys` | text_field | CTRL+c         |            | # Pressing CTRL key down, sends string \"c\" and then releases CTRL key.            |\n| `Press Keys` | button     | RETURN         |            | # Pressing \"ENTER\" key to element.                                                |"
    },
    {
      "name": "Radio Button Should Be Set To",
      "args": [
        "group_name",
        "value"
      ],
      "doc": "Verifies radio button group ``group_name`` is set to ``value``.\n\n``group_name`` is the ``name`` of the radio button group."
    },
    {
      "name": "Radio Button Should Not Be Selected",
      "args": [
        "group_name"
      ],
      "doc": "Verifies radio button group ``group_name`` has no selection.\n\n``group_name`` is the ``name`` of the radio button group."
    },
    {
      "name": "Register Keyword To Run On Failure",
      "args": [
        "keyword"
      ],
      "doc": "Sets the keyword to execute when a SeleniumLibrary keyword fails.\n\n``keyword`` is the name of a keyword that will be executed if a\nSeleniumLibrary keyword fails. It is possible to use any available\nkeyword, including user keywords or keywords from other libraries,\nbut the keyword must not take any arguments.\n\nThe initial keyword to use is set when `importing` the library, and\nthe keyword that is used by default is `Capture Page Screenshot`.\nTaking a screenshot when something failed is a very useful\nfeature, but notice that it can slow down the execution.\n\nIt is possible to use string ``NOTHING`` or ``NONE``,\ncase-insensitively, as well as Python ``None`` to disable this\nfeature altogether.\n\nThis keyword returns the name of the previously registered\nfailure keyword or Python ``None`` if this functionality was\npreviously disabled. The return value can be always used to\nrestore the original value later.\n\nExample:\n| `Register Keyword To Run On Failure`  | Log Source |\n| ${previous kw}= | `Register Keyword To Run On Failure`  | NONE |\n| `Register Keyword To Run On Failure`  | ${previous kw} |\n\nChanges in SeleniumLibrary 3.0:\n- Possible to use string ``NONE`` or Python ``None`` to disable the\n  functionality.\n- Return Python ``None`` when the functionality was disabled earlier.\n  In previous versions special value ``No Keyword`` was returned and\n  it could not be used to restore the original state."
    },
    {
      "name": "Reload Page",
      "args": [],
      "doc": "Simulates user reloading page."
    },
    {
      "name": "Remove Location Strategy",
      "args": [
        "strategy_name"
      ],
      "doc": "Removes a previously added custom location strategy.\n\nSee `Custom locators` for information how to create and use\ncustom strategies."
    },
    {
      "name": "Scroll Element Into View",
      "args": [
        "locator"
      ],
      "doc": "Scrolls an element identified by ``locator`` into view.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nNew in SeleniumLibrary 3.2.0"
    },
    {
      "name": "Select All From List",
      "args": [
        "locator"
      ],
      "doc": "Selects all options from multi-selection list ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Select Checkbox",
      "args": [
        "locator"
      ],
      "doc": "Selects checkbox identified by ``locator``.\n\nDoes nothing if checkbox is already selected.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Select Frame",
      "args": [
        "locator"
      ],
      "doc": "Sets frame identified by ``locator`` as the current frame.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nWorks both with frames and iframes. Use `Unselect Frame` to cancel\nthe frame selection and return to the main frame.\n\nExample:\n| `Select Frame`   | top-frame | # Select frame with id or name 'top-frame'   |\n| `Click Link`     | example   | # Click link 'example' in the selected frame |\n| `Unselect Frame` |           | # Back to main frame.                        |\n| `Select Frame`   | //iframe[@name='xxx'] | # Select frame using xpath       |"
    },
    {
      "name": "Select From List By Index",
      "args": [
        "locator",
        "*indexes"
      ],
      "doc": "Selects options from selection list ``locator`` by ``indexes``.\n\nIndexes of list options start from 0.\n\nIf more than one option is given for a single-selection list,\nthe last value will be selected. With multi-selection lists all\nspecified options are selected, but possible old selections are\nnot cleared.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Select From List By Label",
      "args": [
        "locator",
        "*labels"
      ],
      "doc": "Selects options from selection list ``locator`` by ``labels``.\n\nIf more than one option is given for a single-selection list,\nthe last value will be selected. With multi-selection lists all\nspecified options are selected, but possible old selections are\nnot cleared.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Select From List By Value",
      "args": [
        "locator",
        "*values"
      ],
      "doc": "Selects options from selection list ``locator`` by ``values``.\n\nIf more than one option is given for a single-selection list,\nthe last value will be selected. With multi-selection lists all\nspecified options are selected, but possible old selections are\nnot cleared.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Select Radio Button",
      "args": [
        "group_name",
        "value"
      ],
      "doc": "Sets radio button group ``group_name`` to ``value``.\n\nThe radio button to be selected is located by two arguments:\n- ``group_name`` is the name of the radio button group.\n- ``value`` is the ``id`` or ``value`` attribute of the actual\n  radio button.\n\nExamples:\n| `Select Radio Button` | size    | XL    |\n| `Select Radio Button` | contact | email |"
    },
    {
      "name": "Select Window",
      "args": [
        "locator=MAIN",
        "timeout=None"
      ],
      "doc": "DEPRECATED in SeleniumLibrary 4.0. , use `Switch Window` instead."
    },
    {
      "name": "Set Browser Implicit Wait",
      "args": [
        "value"
      ],
      "doc": "Sets the implicit wait value used by Selenium.\n\nSame as `Set Selenium Implicit Wait` but only affects the current\nbrowser."
    },
    {
      "name": "Set Focus To Element",
      "args": [
        "locator"
      ],
      "doc": "Sets focus to element identified by ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nPrior to SeleniumLibrary 3.0 this keyword was named `Focus`."
    },
    {
      "name": "Set Screenshot Directory",
      "args": [
        "path"
      ],
      "doc": "Sets the directory for captured screenshots.\n\n``path`` argument specifies the absolute path to a directory where\nthe screenshots should be written to. If the directory does not\nexist, it will be created. The directory can also be set when\n`importing` the library. If it is not configured anywhere,\nscreenshots are saved to the same directory where Robot Framework's\nlog file is written.\n\n``persist`` argument is deprecated and has no effect.\n\nThe previous value is returned and can be used to restore\nthe original value later if needed.\n\nReturning the previous value is new in SeleniumLibrary 3.0.\nThe persist argument was removed in SeleniumLibrary 3.2."
    },
    {
      "name": "Set Selenium Implicit Wait",
      "args": [
        "value"
      ],
      "doc": "Sets the implicit wait value used by Selenium.\n\nThe value can be given as a number that is considered to be\nseconds or as a human readable string like ``1 second``.\nThe previous value is returned and can be used to restore\nthe original value later if needed.\n\nThis keyword sets the implicit wait for all opened browsers.\nUse `Set Browser Implicit Wait` to set it only to the current\nbrowser.\n\nSee the `Implicit wait` section above for more information.\n\nExample:\n| ${orig wait} = | `Set Selenium Implicit Wait` | 10 seconds |\n| `Perform AJAX call that is slow` |\n| `Set Selenium Implicit Wait` | ${orig wait} |"
    },
    {
      "name": "Set Selenium Speed",
      "args": [
        "value"
      ],
      "doc": "Sets the delay that is waited after each Selenium command.\n\nThe value can be given as a number that is considered to be\nseconds or as a human readable string like ``1 second``.\nThe previous value is returned and can be used to restore\nthe original value later if needed.\n\nSee the `Selenium Speed` section above for more information.\n\nExample:\n| `Set Selenium Speed` | 0.5 seconds |"
    },
    {
      "name": "Set Selenium Timeout",
      "args": [
        "value"
      ],
      "doc": "Sets the timeout that is used by various keywords.\n\nThe value can be given as a number that is considered to be\nseconds or as a human readable string like ``1 second``.\nThe previous value is returned and can be used to restore\nthe original value later if needed.\n\nSee the `Timeout` section above for more information.\n\nExample:\n| ${orig timeout} = | `Set Selenium Timeout` | 15 seconds |\n| `Open page that loads slowly` |\n| `Set Selenium Timeout` | ${orig timeout} |"
    },
    {
      "name": "Set Window Position",
      "args": [
        "x",
        "y"
      ],
      "doc": "Sets window position using ``x`` and ``y`` coordinates.\n\nThe position is relative to the top left corner of the screen,\nbut some browsers exclude possible task bar set by the operating\nsystem from the calculation. The actual position may thus be\ndifferent with different browsers.\n\nValues can be given using strings containing numbers or by using\nactual numbers. See also `Get Window Position`.\n\nExample:\n| `Set Window Position` | 100 | 200 |"
    },
    {
      "name": "Set Window Size",
      "args": [
        "width",
        "height",
        "inner=False"
      ],
      "doc": "Sets current windows size to given ``width`` and ``height``.\n\nValues can be given using strings containing numbers or by using\nactual numbers. See also `Get Window Size`.\n\nBrowsers have a limit how small they can be set. Trying to set them\nsmaller will cause the actual size to be bigger than the requested\nsize.\n\nIf ``inner`` parameter is set to True, keyword sets the necessary window width and height to have the desired HTML DOM *window.innerWidth* and *window.innerHeight*. See Boolean arguments for more details on how to set boolean arguments.\n\nThe ``inner`` argument is new since SeleniumLibrary 4.0.\n\nThis ``inner`` argument does not support Frames. If a frame is selected, switch to default before running this.\n\nExample:\n| `Set Window Size` | 800 | 600 | |\n| `Set Window Size` | 800 | 600 | True |"
    },
    {
      "name": "Simulate Event",
      "args": [
        "locator",
        "event"
      ],
      "doc": "Simulates ``event`` on element identified by ``locator``.\n\nThis keyword is useful if element has ``OnEvent`` handler that\nneeds to be explicitly invoked.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nPrior to SeleniumLibrary 3.0 this keyword was named `Simulate`."
    },
    {
      "name": "Submit Form",
      "args": [
        "locator=None"
      ],
      "doc": "Submits a form identified by ``locator``.\n\nIf ``locator`` is not given, first form on the page is submitted.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Switch Browser",
      "args": [
        "index_or_alias"
      ],
      "doc": "Switches between active browsers using ``index_or_alias``.\n\nIndices are returned by the `Open Browser` keyword and aliases can\nbe given to it explicitly. Indices start from 1.\n\nExample:\n| `Open Browser`        | http://google.com | ff       |\n| `Location Should Be`  | http://google.com |          |\n| `Open Browser`        | http://yahoo.com  | ie       | alias=second |\n| `Location Should Be`  | http://yahoo.com  |          |\n| `Switch Browser`      | 1                 | # index  |\n| `Page Should Contain` | I'm feeling lucky |          |\n| `Switch Browser`      | second            | # alias  |\n| `Page Should Contain` | More Yahoo!       |          |\n| `Close All Browsers`  |                   |          |\n\nAbove example expects that there was no other open browsers when\nopening the first one because it used index ``1`` when switching to\nit later. If you are not sure about that, you can store the index\ninto a variable as below.\n\n| ${index} =         | `Open Browser` | http://google.com |\n| # Do something ... |                |                   |\n| `Switch Browser`   | ${index}       |                   |"
    },
    {
      "name": "Switch Window",
      "args": [
        "locator=MAIN",
        "timeout=None",
        "browser=CURRENT"
      ],
      "doc": "Switches to browser window matching ``locator``.\n\nIf the window is found, all subsequent commands use the selected window, until this keyword is used again. If the window is not found, this keyword fails. The previous windows handle is returned and can be used to switch back to it later.\n\nNotice that alerts should be handled with `Handle Alert` or other alert related keywords.\n\nThe ``locator`` can be specified using different strategies somewhat similarly as when `locating elements` on pages.\n- By default, the ``locator`` is matched against window handle, name, title, and URL. Matching is done in that order and the first matching window is selected.\n- The ``locator`` can specify an explicit strategy by using the format ``strategy:value`` (recommended) or ``strategy=value``. Supported strategies are ``name``, ``title``, and ``url``. These matches windows using their name, title, or URL, respectively. Additionally, ``default`` can be used to explicitly use the default strategy explained above.\n- If the ``locator`` is ``NEW`` (case-insensitive), the latest opened window is selected. It is an error if this is the same as the current window.\n- If the ``locator`` is ``MAIN`` (default, case-insensitive), the main window is selected.\n- If the ``locator`` is ``CURRENT`` (case-insensitive), nothing is done. This effectively just returns the current window handle.\n- If the ``locator`` is not a string, it is expected to be a list of window handles to exclude. Such a list of excluded windows can be got from `Get Window Handles` before doing an action that opens a new window.\n\nThe ``timeout`` is used to specify how long keyword will poll to select the new window. The ``timeout`` is new in SeleniumLibrary 3.2.\n\nExample:\n| `Click Link`      | popup1               |     | # Open new window                      |\n| `Switch Window`   | example              |     | # Select window using default strategy |\n| `Title Should Be` | Pop-up 1             |     |                                        |\n| `Click Button`    | popup2               |     | # Open another window                  |\n| ${handle} =       | `Switch Window`      | NEW | # Select latest opened window          |\n| `Title Should Be` | Pop-up 2             |     |                                        |\n| `Switch Window`   | ${handle}            |     | # Select window using handle           |\n| `Title Should Be` | Pop-up 1             |     |                                        |\n| `Switch Window`   | MAIN                 |     | # Select the main window               |\n| `Title Should Be` | Main                 |     |                                        |\n| ${excludes} =     | `Get Window Handles` |     | # Get list of current windows          |\n| `Click Link`      | popup3               |     | # Open one more window                 |\n| `Switch Window`   | ${excludes}          |     | # Select window using excludes         |\n| `Title Should Be` | Pop-up 3             |     |                                        |\n\nThe ``browser`` argument allows with ``index_or_alias`` to implicitly switch to a specific browser when switching to a window. See `Switch Browser`\n\n- If the ``browser`` is ``CURRENT`` (case-insensitive), no other browser is selected.\n\n** NOTE: **\n\n- The `strategy:value` syntax is only supported by SeleniumLibrary 3.0 and newer.\n- Prior to SeleniumLibrary 3.0 matching windows by name, title and URL was case-insensitive.\n- Earlier versions supported aliases ``None``, ``null`` and the empty string for selecting the main window, and alias ``self`` for selecting the current window. Support for these aliases was removed in SeleniumLibrary 3.2."
    },
    {
      "name": "Table Cell Should Contain",
      "args": [
        "locator",
        "row",
        "column",
        "expected",
        "loglevel=TRACE"
      ],
      "doc": "Verifies table cell contains text ``expected``.\n\nSee `Get Table Cell` that this keyword uses internally for\nexplanation about accepted arguments."
    },
    {
      "name": "Table Column Should Contain",
      "args": [
        "locator",
        "column",
        "expected",
        "loglevel=TRACE"
      ],
      "doc": "Verifies table column contains text ``expected``.\n\nThe table is located using the ``locator`` argument and its column\nfound using ``column``. See the `Locating elements` section for\ndetails about the locator syntax.\n\nColumn indexes start from 1. It is possible to refer to columns\nfrom the end by using negative indexes so that -1 is the last column,\n-2 is the second last, and so on.\n\nIf a table contains cells that span multiple columns, those merged\ncells count as a single column.\n\nSee `Page Should Contain Element` for explanation about the\n``loglevel`` argument."
    },
    {
      "name": "Table Footer Should Contain",
      "args": [
        "locator",
        "expected",
        "loglevel=TRACE"
      ],
      "doc": "Verifies table footer contains text ``expected``.\n\nAny ``<td>`` element inside ``<tfoot>`` element is considered to\nbe part of the footer.\n\nThe table is located using the ``locator`` argument. See the\n`Locating elements` section for details about the locator syntax.\n\nSee `Page Should Contain Element` for explanation about the\n``loglevel`` argument."
    },
    {
      "name": "Table Header Should Contain",
      "args": [
        "locator",
        "expected",
        "loglevel=TRACE"
      ],
      "doc": "Verifies table header contains text ``expected``.\n\nAny ``<th>`` element anywhere in the table is considered to be\npart of the header.\n\nThe table is located using the ``locator`` argument. See the\n`Locating elements` section for details about the locator syntax.\n\nSee `Page Should Contain Element` for explanation about the\n``loglevel`` argument."
    },
    {
      "name": "Table Row Should Contain",
      "args": [
        "locator",
        "row",
        "expected",
        "loglevel=TRACE"
      ],
      "doc": "Verifies that table row contains text ``expected``.\n\nThe table is located using the ``locator`` argument and its column\nfound using ``column``. See the `Locating elements` section for\ndetails about the locator syntax.\n\nRow indexes start from 1. It is possible to refer to rows\nfrom the end by using negative indexes so that -1 is the last row,\n-2 is the second last, and so on.\n\nIf a table contains cells that span multiple rows, a match\nonly occurs for the uppermost row of those merged cells.\n\nSee `Page Should Contain Element` for explanation about the\n``loglevel`` argument."
    },
    {
      "name": "Table Should Contain",
      "args": [
        "locator",
        "expected",
        "loglevel=TRACE"
      ],
      "doc": "Verifies table contains text ``expected``.\n\nThe table is located using the ``locator`` argument. See the\n`Locating elements` section for details about the locator syntax.\n\nSee `Page Should Contain Element` for explanation about the\n``loglevel`` argument."
    },
    {
      "name": "Textarea Should Contain",
      "args": [
        "locator",
        "expected",
        "message=None"
      ],
      "doc": "Verifies text area ``locator`` contains text ``expected``.\n\n``message`` can be used to override default error message.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Textarea Value Should Be",
      "args": [
        "locator",
        "expected",
        "message=None"
      ],
      "doc": "Verifies text area ``locator`` has exactly text ``expected``.\n\n``message`` can be used to override default error message.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Textfield Should Contain",
      "args": [
        "locator",
        "expected",
        "message=None"
      ],
      "doc": "Verifies text field ``locator`` contains text ``expected``.\n\n``message`` can be used to override the default error message.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Textfield Value Should Be",
      "args": [
        "locator",
        "expected",
        "message=None"
      ],
      "doc": "Verifies text field ``locator`` has exactly text ``expected``.\n\n``message`` can be used to override default error message.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Title Should Be",
      "args": [
        "title",
        "message=None"
      ],
      "doc": "Verifies that current page title equals ``title``.\n\nThe ``message`` argument can be used to override the default error\nmessage.\n\n``message`` argument is new in SeleniumLibrary 3.1."
    },
    {
      "name": "Unselect All From List",
      "args": [
        "locator"
      ],
      "doc": "Unselects all options from multi-selection list ``locator``.\n\nSee the `Locating elements` section for details about the locator\nsyntax.\n\nNew in SeleniumLibrary 3.0."
    },
    {
      "name": "Unselect Checkbox",
      "args": [
        "locator"
      ],
      "doc": "Removes selection of checkbox identified by ``locator``.\n\nDoes nothing if the checkbox is not selected.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Unselect Frame",
      "args": [],
      "doc": "Sets the main frame as the current frame.\n\nIn practice cancels the previous `Select Frame` call."
    },
    {
      "name": "Unselect From List By Index",
      "args": [
        "locator",
        "*indexes"
      ],
      "doc": "Unselects options from selection list ``locator`` by ``indexes``.\n\nIndexes of list options start from 0. This keyword works only with\nmulti-selection lists.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Unselect From List By Label",
      "args": [
        "locator",
        "*labels"
      ],
      "doc": "Unselects options from selection list ``locator`` by ``labels``.\n\nThis keyword works only with multi-selection lists.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Unselect From List By Value",
      "args": [
        "locator",
        "*values"
      ],
      "doc": "Unselects options from selection list ``locator`` by ``values``.\n\nThis keyword works only with multi-selection lists.\n\nSee the `Locating elements` section for details about the locator\nsyntax."
    },
    {
      "name": "Wait For Condition",
      "args": [
        "condition",
        "timeout=None",
        "error=None"
      ],
      "doc": "Waits until ``condition`` is true or ``timeout`` expires.\n\nThe condition can be arbitrary JavaScript expression but it\nmust return a value to be evaluated. See `Execute JavaScript` for\ninformation about accessing content on pages.\n\nFails if the timeout expires before the condition becomes true. See\nthe `Timeouts` section for more information about using timeouts\nand their default value.\n\n``error`` can be used to override the default error message.\n\nExamples:\n| `Wait For Condition` | return document.title == \"New Title\" |\n| `Wait For Condition` | return jQuery.active == 0            |\n| `Wait For Condition` | style = document.querySelector('h1').style; return style.background == \"red\" && style.color == \"white\" |"
    },
    {
      "name": "Wait Until Element Contains",
      "args": [
        "locator",
        "text",
        "timeout=None",
        "error=None"
      ],
      "doc": "Waits until element ``locator`` contains ``text``.\n\nFails if ``timeout`` expires before the text appears. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message."
    },
    {
      "name": "Wait Until Element Does Not Contain",
      "args": [
        "locator",
        "text",
        "timeout=None",
        "error=None"
      ],
      "doc": "Waits until element ``locator`` does not contain ``text``.\n\nFails if ``timeout`` expires before the text disappears. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message."
    },
    {
      "name": "Wait Until Element Is Enabled",
      "args": [
        "locator",
        "timeout=None",
        "error=None"
      ],
      "doc": "Waits until element ``locator`` is enabled.\n\nElement is considered enabled if it is not disabled nor read-only.\n\nFails if ``timeout`` expires before the element is enabled. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message.\n\nConsidering read-only elements to be disabled is a new feature\nin SeleniumLibrary 3.0."
    },
    {
      "name": "Wait Until Element Is Not Visible",
      "args": [
        "locator",
        "timeout=None",
        "error=None"
      ],
      "doc": "Waits until element ``locator`` is not visible.\n\nFails if ``timeout`` expires before the element is not visible. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message."
    },
    {
      "name": "Wait Until Element Is Visible",
      "args": [
        "locator",
        "timeout=None",
        "error=None"
      ],
      "doc": "Waits until element ``locator`` is visible.\n\nFails if ``timeout`` expires before the element is visible. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message."
    },
    {
      "name": "Wait Until Location Contains",
      "args": [
        "expected",
        "timeout=None",
        "message=None"
      ],
      "doc": "Waits until the current URL contains ``expected``.\n\nThe ``expected`` argument contains the expected value in url.\n\nFails if ``timeout`` expires before the location contains. See the *Timeouts* section for more information about using timeouts and their default value.\n\nThe ``message`` argument can be used to override the default error message.\n\nNew in SeleniumLibrary 4.0"
    },
    {
      "name": "Wait Until Location Is",
      "args": [
        "expected",
        "timeout=None",
        "message=None"
      ],
      "doc": "Waits until the current URL is ``expected``.\n\nThe ``expected`` argument is the expected value in url.\n\nFails if ``timeout`` expires before the location is. See the *Timeouts* section for more information about using timeouts and their default value.\n\nThe ``message`` argument can be used to override the default error message.\n\nNew in SeleniumLibrary 4.0"
    },
    {
      "name": "Wait Until Page Contains",
      "args": [
        "text",
        "timeout=None",
        "error=None"
      ],
      "doc": "Waits until ``text`` appears on current page.\n\nFails if ``timeout`` expires before the text appears. See\nthe `Timeouts` section for more information about using timeouts\nand their default value.\n\n``error`` can be used to override the default error message."
    },
    {
      "name": "Wait Until Page Contains Element",
      "args": [
        "locator",
        "timeout=None",
        "error=None"
      ],
      "doc": "Waits until element ``locator`` appears on current page.\n\nFails if ``timeout`` expires before the element appears. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message."
    },
    {
      "name": "Wait Until Page Does Not Contain",
      "args": [
        "text",
        "timeout=None",
        "error=None"
      ],
      "doc": "Waits until ``text`` disappears from current page.\n\nFails if ``timeout`` expires before the text disappears. See\nthe `Timeouts` section for more information about using timeouts\nand their default value.\n\n``error`` can be used to override the default error message."
    },
    {
      "name": "Wait Until Page Does Not Contain Element",
      "args": [
        "locator",
        "timeout=None",
        "error=None"
      ],
      "doc": "Waits until element ``locator`` disappears from current page.\n\nFails if ``timeout`` expires before the element disappears. See\nthe `Timeouts` section for more information about using timeouts and\ntheir default value and the `Locating elements` section for details\nabout the locator syntax.\n\n``error`` can be used to override the default error message."
    }
  ]
}